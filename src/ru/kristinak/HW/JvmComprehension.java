package ru.kristinak.HW;

public class JvmComprehension { // класс JvmComprehension отдается для загрузки в систему загрузчиков классов через ClassLoader'ы: Bootstrap ClassLoader,
    // Platform ClassLoader и Application ClassLoader, где происходит поиск класса, и его загрузка при успешном поиске. Найденный класс кладется в Metaspace.
    public static void main(String[] args) { // инициализирауется метод main, который является точкой входа. В момент вызова метода создается фрэйм в Stack Memory,
        // в этом фрейме будет храниться вся информация, которая относится к области видимости метода.
        int i = 1;                      // создается переменная примитивного типа int - i внутри фрэйма в Stack Memory. Переменной i присвоено значение "1"
        Object o = new Object();        // создается объект Object (Memory) в heap (куче), ссылка на этот объект кладется в переменную "o" и хранится в Stack Memory
        Integer ii = 2;                 // создается переменная ii, ссылочного типа Integer, который “оборачивает” переменную типа int в Java-объект,
        // объект хранится в heap (куче), ссылка на этот объект кладется в переменную ii и хранится в Stack Memory
        printAll(o, i, ii);             // вызывается метод printAll, создается новый фрейм в Stack Memory, в фрейм через метод передаются ранее созданные примитив i и ссылки на
        // объект o и ссылочную переменную ii
        System.out.println("finished"); // в Stack Memory создается новый фрейм
    }

    private static void printAll(Object o, int i, Integer ii) { // инициализируется статический метод printAll указываются типы передаваемых аргументов: один примитив и две
        // ссылочные переменные. Создается строка в heap (куче)
        Integer uselessVar = 700;       // создается переменная uselessVar, ссылочного типа Integer, который “оборачивает” переменную типа int в Java-объект,
        // объект хранится в heap (куче), ссылка на этот объект кладется в переменную uselessVar и хранится в Stack Memory. Переменной uselessVar
        // задается значение 700
        System.out.println(o.toString() + i + ii);  // создается новый фрейм println в Stack Memory, в который передаются переменные o, i и ii. новый фрейм – toString, в него передаётся
        // ссылка не объект o, затем происходит вычисление, в результате которого в строкохранилище создаётся соответствующая строка. Фрейм уничтожается,
        // ссылка на вычисленную строку возвращается обратно во фрейм printAll и фиксируется в качестве первого аргумента. Происходит вывод вычисленной строки на экран.
    }
}
